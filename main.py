import os
import sqlite3
import logging
import signal
import re
from threading import Thread
from datetime import datetime
from flask import Flask
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler
)

# ========== FLASK INIT ==========
app = Flask(__name__)

@app.route('/')
def home():
    return "üöÄ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –ü–æ—Ä—Ç: " + os.environ.get('PORT', '10000'), 200

def run_flask():
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 10000)))

# ========== CONFIG ==========
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_CHAT_ID = int(os.environ.get('ADMIN_CHAT_ID'))
DB_NAME = "applications.db"

# ========== DIALOG STATES ==========
(
    CITIZENSHIP,
    CITIZENSHIP_SNG,
    CITIZENSHIP_OTHER,
    FULL_NAME,
    PRIOR_EMPLOYMENT,
    EMPLOYMENT_PERIOD,
    PHONE,
    CITY,
    AGE,
    SELF_EMPLOYED,
    SELF_EMPLOYED_CHOICE,
    TRANSPORT,
    CONFIRMATION,
    EDIT_FIELD,
) = range(14)

# ========== LOGGING ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========== DATABASE ==========
def init_db():
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS applications (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                username TEXT,
                full_name TEXT NOT NULL,
                citizenship TEXT NOT NULL,
                prior_employment TEXT,
                employment_period TEXT,
                phone TEXT NOT NULL,
                city TEXT NOT NULL,
                age INTEGER NOT NULL,
                self_employed TEXT NOT NULL,
                self_employed_choice TEXT,
                transport TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'new'
            )
        """)
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {str(e)}")
    finally:
        if conn:
            conn.close()

def save_application(user_data, user_id, username):
    conn = None
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT INTO applications (
                user_id, username, full_name, citizenship, 
                prior_employment, employment_period, phone, 
                city, age, self_employed, self_employed_choice, transport
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            RETURNING id
        """, (
            user_id,
            username,
            user_data.get('full_name'),
            user_data.get('citizenship'),
            user_data.get('prior_employment'),
            user_data.get('employment_period'),
            user_data.get('phone'),
            user_data.get('city'),
            user_data.get('age'),
            user_data.get('self_employed'),
            user_data.get('self_employed_choice'),
            user_data.get('transport')
        ))
        
        app_id = cursor.fetchone()[0]
        conn.commit()
        return app_id
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
        return None
    finally:
        if conn:
            conn.close()

# ========== VALIDATION ==========
RUSSIAN_CITIES = {
    '–º–æ—Å–∫–≤–∞', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥',
    '–∫–∞–∑–∞–Ω—å', '—á–µ–ª—è–±–∏–Ω—Å–∫', '—Å–∞–º–∞—Ä–∞', '–æ–º—Å–∫', '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É', '—É—Ñ–∞', '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
    '–ø–µ—Ä–º—å', '–≤–æ—Ä–æ–Ω–µ–∂', '–≤–æ–ª–≥–æ–≥—Ä–∞–¥', '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä', '—Å–∞—Ä–∞—Ç–æ–≤', '—Ç—é–º–µ–Ω—å', '—Ç–æ–ª—å—è—Ç—Ç–∏',
    '–∏–∂–µ–≤—Å–∫', '–±–∞—Ä–Ω–∞—É–ª', '–∏—Ä–∫—É—Ç—Å–∫', '—É–ª—å—è–Ω–æ–≤—Å–∫', '—Ö–∞–±–∞—Ä–æ–≤—Å–∫', '—è—Ä–æ—Å–ª–∞–≤–ª—å', '–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
    '–º–∞—Ö–∞—á–∫–∞–ª–∞', '—Ç–æ–º—Å–∫', '–æ—Ä–µ–Ω–±—É—Ä–≥', '–∫–µ–º–µ—Ä–æ–≤–æ', '–Ω–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫', '—Ä—è–∑–∞–Ω—å', '–∞—Å—Ç—Ä–∞—Ö–∞–Ω—å',
    '–Ω–∞–±–µ—Ä–µ–∂–Ω—ã–µ —á–µ–ª–Ω—ã', '–ø–µ–Ω–∑–∞', '–ª–∏–ø–µ—Ü–∫', '–∫–∏—Ä–æ–≤', '—á–µ–±–æ–∫—Å–∞—Ä—ã', '–∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', '—Ç—É–ª–∞',
    '—Å—Ç–∞–≤—Ä–æ–ø–æ–ª—å', '–∫—É—Ä—Å–∫', '—Å–æ—á–∏', '—Ç–≤–µ—Ä—å', '–º–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫', '–∏–≤–∞–Ω–æ–≤–æ', '–±—Ä—è–Ω—Å–∫', '–±–µ–ª–≥–æ—Ä–æ–¥',
    '—Å—É—Ä–≥—É—Ç', '–≤–ª–∞–¥–∏–º–∏—Ä', '–∞—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫', '–∫–∞–ª—É–≥–∞', '—Å–º–æ–ª–µ–Ω—Å–∫', '–≤–æ–ª–æ–≥–¥–∞', '—Å–∞–ª–∞–≤–∞—Ç', '—á–∏—Ç–∞',
    '–æ—Ä—ë–ª', '–≤–æ–ª–∂—Å–∫–∏–π', '—á–µ—Ä–µ–ø–æ–≤–µ—Ü', '–≤–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑', '–º—É—Ä–º–∞–Ω—Å–∫', '–ø–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫', '–∫–æ—Å—Ç—Ä–æ–º–∞',
    '–Ω–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫', '–Ω–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫', '–π–æ—à–∫–∞—Ä-–æ–ª–∞', '—Ç–∞–≥–∞–Ω—Ä–æ–≥', '—Å—ã–∫—Ç—ã–≤–∫–∞—Ä', '–Ω–∞–ª—å—á–∏–∫',
    '—à–∞—Ö—Ç—ã', '–¥–∑–µ—Ä–∂–∏–Ω—Å–∫', '–±–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫', '—ç–ª–∏—Å—Ç–∞', '–ø—Å–∫–æ–≤', '–±–∏–π—Å–∫', '–ø—Ä–æ–∫–æ–ø—å–µ–≤—Å–∫',
    '–∞–Ω–≥–∞—Ä—Å–∫', '—Å—Ç–∞–≤—Ä–æ–ø–æ–ª—å', '–ª—é–±–µ—Ä—Ü—ã', '–º—ã—Ç–∏—â–∏', '–±–∞–ª–∞—à–∏—Ö–∞', '—Ö–∏–º–∫–∏', '–∫–æ—Ä–æ–ª—ë–≤', '–ø–æ–¥–æ–ª—å—Å–∫',
    '—Å–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å', '—Å—É—Ä–≥—É—Ç', '–Ω–æ–≤—ã–π —É—Ä–µ–Ω–≥–æ–π', '–≤–æ–ª–≥–æ–¥–æ–Ω—Å–∫', '–∞–±–¥—É–ª–∏–Ω–æ', '–∞–∑–æ–≤', '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤',
    '–∞–ª–µ–∫—Å–∏–Ω', '–∞–ª—å–º–µ—Ç—å–µ–≤—Å–∫', '–∞–Ω–∞–ø–∞', '–∞–ø–∞—Ç–∏—Ç—ã', '–∞—Ä–∑–∞–º–∞—Å', '–∞—Ä–º–∞–≤–∏—Ä', '–∞—Ä—Ç—ë–º', '–∞—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫',
    '–∞—Å–±–µ—Å—Ç', '–∞—á–∏–Ω—Å–∫', '–±–∞–ª–∞–∫–æ–≤–æ', '–±–∞–ª–∞—Ö–Ω–∞', '–±–∞—Ç–∞–π—Å–∫', '–±–µ–ª–æ–≥–æ—Ä—Å–∫', '–±–µ–ª–æ—Ä–µ—Ü–∫', '–±–µ–ª–æ—Ä–µ—á–µ–Ω—Å–∫',
    '–±–µ—Ä–¥—Å–∫', '–±–µ—Ä–µ–∑–Ω–∏–∫–∏', '–±–µ—Å–ª–∞–Ω', '–±–æ—Ä', '–±–æ—Ä–∏—Å–æ–≥–ª–µ–±—Å–∫', '–±—Ä–∞—Ç—Å–∫', '–±—É–≥—É–ª—å–º–∞', '–±—É–¥—ë–Ω–Ω–æ–≤—Å–∫',
    '–±—É–∑—É–ª—É–∫', '–±—É–π–Ω–∞–∫—Å–∫', '–≤–µ–ª–∏–∫–∏–µ –ª—É–∫–∏', '–≤–µ–ª–∏–∫–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥', '–≤–∏–¥–Ω–æ–µ', '–≤–æ–±–æ—Ä–∫–∞', '–≤–æ–ª–∂—Å–∫',
    '–≤–æ–ª–æ–≥–¥–∞', '–≤–æ—Ä–∫—É—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫', '–≤–æ—Ç–∫–∏–Ω—Å–∫', '–≤—ã–±–æ—Ä–≥', '–≤—ã–∫—Å–∞', '–≤—è–∑—å–º–∞', '–≥–∞—Ç—á–∏–Ω–∞',
    '–≥–µ–ª–µ–Ω–¥–∂–∏–∫', '–≥–æ—Ä–Ω–æ-–∞–ª—Ç–∞–π—Å–∫', '–≥—Ä–æ–∑–Ω—ã–π', '–≥—É–±–∫–∏–Ω', '–≥—É–∫–æ–≤–æ', '–≥—É—Ä—å–µ–≤—Å–∫', '–¥–µ—Ä–±–µ–Ω—Ç', '–¥–æ–ª–≥–æ–ø—Ä—É–¥–Ω—ã–π',
    '–¥–æ–º–æ–¥–µ–¥–æ–≤–æ', '–¥—É–±–Ω–∞', '–µ–≤–ø–∞—Ç–æ—Ä–∏—è', '–µ–≥–æ—Ä—å–µ–≤—Å–∫', '–µ–π—Å–∫', '–µ–ª–µ—Ü', '–µ—Å—Å–µ–Ω—Ç—É–∫–∏', '–∂–µ–ª–µ–∑–Ω–æ–≥–æ—Ä—Å–∫',
    '–∂–∏–≥—É–ª—ë–≤—Å–∫', '–∂—É–∫–æ–≤—Å–∫–∏–π', '–∑–∞—Ä–µ—á–Ω—ã–π', '–∑–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫', '–∑–ª–∞—Ç–æ—É—Å—Ç', '–∏–≤–∞–Ω—Ç–µ–µ–≤–∫–∞', '–∏—à–∏–º',
    '–∏—à–∏–º–±–∞–π', '–π–æ—à–∫–∞—Ä-–æ–ª–∞', '–∫–∞–¥–Ω–∏–∫–æ–≤', '–∫–∞–º–µ–Ω—Å–∫-—É—Ä–∞–ª—å—Å–∫–∏–π', '–∫–∞–º–µ–Ω—Å–∫-—à–∞—Ö—Ç–∏–Ω—Å–∫–∏–π', '–∫–∞—Ä–∞—á–∞–µ–≤—Å–∫',
    '–∫–µ–º–µ—Ä–æ–≤–æ', '–∫–∏–Ω–µ—à–º–∞', '–∫–∏—Ä–∏—à–∏', '–∫–∏—Å–µ–ª—ë–≤—Å–∫', '–∫–ª–∏–Ω', '–∫–ª–∏–Ω—Ü—ã', '–∫–æ–≤—Ä–æ–≤', '–∫–æ–ª–æ–º–Ω–∞', '–∫–æ–º—Å–æ–º–æ–ª—å—Å–∫-–Ω–∞-–∞–º—É—Ä–µ',
    '–∫–æ–ø–µ–π—Å–∫', '–∫–æ—Ä–∫–∏–Ω–æ', '–∫–æ—Å—Ç—Ä–æ–º–∞', '–∫–æ—Ç–ª–∞—Å', '–∫—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '–∫—Ä–∞—Å–Ω–æ–∫–∞–º–µ–Ω—Å–∫', '–∫—Ä–∞—Å–Ω–æ–∫–∞–º—Å–∫',
    '–∫—É–º–µ—Ä—Ç–∞—É', '–∫—É–Ω–≥—É—Ä', '–∫—É—Ä–≥–∞–Ω', '–∫—É—Ä—á–∞—Ç–æ–≤', '–∫—ã–∑—ã–ª', '–ª–∞–±–∏–Ω—Å–∫', '–ª–µ–Ω–∏–Ω–æ–≥–æ—Ä—Å–∫', '–ª–µ—Ä–º–æ–Ω—Ç–æ–≤',
    '–ª–∏—Å–∫–∏', '–ª–æ–±–Ω—è', '–ª—ã—Å—å–≤–∞', '–ª—ã—Ç–∫–∞—Ä–∏–Ω–æ', '–ª—é–±–µ—Ä—Ü—ã', '–º–∞–≥–∞–¥–∞–Ω', '–º–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫', '–º–∞–π–∫–æ–ø',
    '–º–∏–∞—Å—Å', '–º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–¥—ã', '–º–∏—á—É—Ä–∏–Ω—Å–∫', '–Ω–∞–±–µ—Ä–µ–∂–Ω—ã–µ —á–µ–ª–Ω—ã', '–Ω–∞–∑—Ä–∞–Ω—å', '–Ω–∞–ª—å—á–∏–∫', '–Ω–∞—Ä–æ-—Ñ–æ–º–∏–Ω—Å–∫',
    '–Ω–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫', '–Ω–µ—Ñ—Ç–µ–∫–∞–º—Å–∫', '–Ω–µ—Ñ—Ç–µ—é–≥–∞–Ω—Å–∫', '–Ω–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫', '–Ω–∏–∂–Ω–µ–∫–∞–º—Å–∫', '–Ω–∏–∂–Ω—è—è —Ç—É—Ä–∞',
    '–Ω–æ–≤–æ–∞–ª—Ç–∞–π—Å–∫', '–Ω–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫', '–Ω–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫', '–Ω–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–Ω–æ–≤–æ—á–µ–±–æ–∫—Å–∞—Ä—Å–∫',
    '–Ω–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫', '–Ω–æ–≤–æ—à–∞—Ö—Ç–∏–Ω—Å–∫', '–Ω–æ–≥–∏–Ω—Å–∫', '–Ω–æ—è–±—Ä—å—Å–∫', '–Ω—é—Ä–±–∞', '–Ω—è–≥–∞–Ω—å', '–æ–±–Ω–∏–Ω—Å–∫', '–æ–¥–∏–Ω—Ü–æ–≤–æ',
    '–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π', '–æ–º—Å–∫', '–æ—Ä–µ–ª', '–æ—Ä–µ–Ω–±—É—Ä–≥', '–æ—Ä–µ—Ö–æ–≤–æ-–∑—É–µ–≤–æ', '–æ—Ä—Å–∫', '–ø–∞–≤–ª–æ–≤–æ', '–ø–∞–≤–ª–æ–≤—Å–∫–∏–π –ø–æ—Å–∞–¥',
    '–ø–µ–Ω–∑–∞', '–ø–µ—Ä–≤–æ—É—Ä–∞–ª—å—Å–∫', '–ø–µ—Ä–º—å', '–ø–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫', '–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–∫–∞–º—á–∞—Ç—Å–∫–∏–π', '–ø–æ–¥–æ–ª—å—Å–∫',
    '–ø–æ–ª–µ–≤—Å–∫–æ–π', '–ø—Ä–æ–∫–æ–ø—å–µ–≤—Å–∫', '–ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π', '–ø—Å–∫–æ–≤', '–ø—É—à–∫–∏–Ω–æ', '—Ä–∞–º–µ–Ω—Å–∫–æ–µ', '—Ä–µ–≤–¥–∞', '—Ä–µ—É—Ç–æ–≤',
    '—Ä–æ—Å–ª–∞–≤–ª—å', '—Ä–æ—Å—Å–æ—à—å', '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É', '—Ä—É–±—Ü–æ–≤—Å–∫', '—Ä—ã–±–∏–Ω—Å–∫', '—Ä—è–∑–∞–Ω—å', '—Å–∞–ª–∞–≤–∞—Ç', '—Å–∞–ª—å—Å–∫',
    '—Å–∞–º–∞—Ä–∞', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '—Å–∞—Ä–∞–Ω—Å–∫', '—Å–∞—Ä–∞–ø—É–ª', '—Å–∞—Ä–∞—Ç–æ–≤', '—Å–∞—Ä–æ–≤', '—Å–≤–æ–±–æ–¥–Ω—ã–π', '—Å–µ–≤–µ—Ä–æ–¥–≤–∏–Ω—Å–∫',
    '—Å–µ–≤–µ—Ä—Å–∫', '—Å–µ—Ä–≥–∏–µ–≤ –ø–æ—Å–∞–¥', '—Å–µ—Ä–æ–≤', '—Å–µ—Ä–ø—É—Ö–æ–≤', '—Å–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å', '—Å–ª–∞–≤—è–Ω—Å–∫-–Ω–∞-–∫—É–±–∞–Ω–∏', '—Å–º–æ–ª–µ–Ω—Å–∫',
    '—Å–æ–ª–∏–∫–∞–º—Å–∫', '—Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ—Ä—Å–∫', '—Å–æ—Å–Ω–æ–≤—ã–π –±–æ—Ä', '—Å–æ—á–∏', '—Å—Ç–∞–≤—Ä–æ–ø–æ–ª—å', '—Å—Ç–∞—Ä—ã–π –æ—Å–∫–æ–ª', '—Å—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫',
    '—Å—Ç—É–ø–∏–Ω–æ', '—Å—É—Ä–≥—É—Ç', '—Å—ã–∑—Ä–∞–Ω—å', '—Å—ã–∫—Ç—ã–≤–∫–∞—Ä', '—Ç–∞–≥–∞–Ω—Ä–æ–≥', '—Ç–∞–º–±–æ–≤', '—Ç–≤–µ—Ä—å', '—Ç–∏—Ö–≤–∏–Ω', '—Ç–∏—Ö–æ—Ä–µ—Ü–∫',
    '—Ç–æ–±–æ–ª—å—Å–∫', '—Ç–æ–ª—å—è—Ç—Ç–∏', '—Ç–æ–º—Å–∫', '—Ç—Ä–æ–∏—Ü–∫', '—Ç—É–∞–ø—Å–µ', '—Ç—É–ª–∞', '—Ç—é–º–µ–Ω—å', '—É–ª–∞–Ω-—É–¥—ç', '—É–ª—å—è–Ω–æ–≤—Å–∫',
    '—É—Å—Å—É—Ä–∏–π—Å–∫', '—É—Å—Ç—å-–∏–ª–∏–º—Å–∫', '—É—Ñ–∞', '—É—Ö—Ç–∞', '—Ö–∞–±–∞—Ä–æ–≤—Å–∫', '—Ö–∞–¥—ã–∂–µ–Ω—Å–∫', '—Ö–∏–º–∫–∏', '—á–∞–π–∫–æ–≤—Å–∫–∏–π',
    '—á–∞–ø–∞–µ–≤—Å–∫', '—á–µ–±–æ–∫—Å–∞—Ä—ã', '—á–µ–ª—è–±–∏–Ω—Å–∫', '—á–µ—Ä–µ–º—Ö–æ–≤–æ', '—á–µ—Ä–µ–ø–æ–≤–µ—Ü', '—á–µ—Ä–∫–µ—Å—Å–∫', '—á–µ—Ä–Ω–æ–≥–æ—Ä—Å–∫',
    '—á–µ—Ö–æ–≤', '—á–∏—Å—Ç–æ–ø–æ–ª—å', '—á–∏—Ç–∞', '—à–∞–¥—Ä–∏–Ω—Å–∫', '—à–∞–ª–∏', '—à–∞—Ö—Ç—ã', '—à—É—è', '—â–µ–∫–∏–Ω–æ', '—â–µ–ª–∫–æ–≤–æ', '—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å',
    '—ç–ª–∏—Å—Ç–∞', '—ç–Ω–≥–µ–ª—å—Å', '—é–∂–Ω–æ-—Å–∞—Ö–∞–ª–∏–Ω—Å–∫', '—é—Ä–≥–∞', '—è–∫—É—Ç—Å–∫', '—è–ª—Ç–∞', '—è—Ä–æ—Å–ª–∞–≤–ª—å'
}

def normalize_city_name(city: str) -> str:
    return re.sub(r'[^\w\s-]', '', city.lower().strip())

def is_valid_russian_city(city: str) -> bool:
    normalized = normalize_city_name(city)
    aliases = {
        '—Å–ø–±': '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥',
        '–Ω—Å–∫': '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
        '–µ–∫–±': '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'
    }
    return normalized in RUSSIAN_CITIES or aliases.get(normalized) in RUSSIAN_CITIES

# ========== KEYBOARDS ==========
SNG_COUNTRIES = [
    ["üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å", "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"],
    ["üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", "üá¶üá≤ –ê—Ä–º–µ–Ω–∏—è"],
    ["üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω", "üá≤üá© –ú–æ–ª–¥–æ–≤–∞"],
    ["üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω", "üáπüáØ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω"],
    ["üåç –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞", "üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]
]

CITIZENSHIP_KEYBOARD = [["üá∑üá∫ –†–§", "üåç –°–ù–ì/–î—Ä—É–≥–æ–µ"]]
PRIOR_EMPLOYMENT_KEYBOARD = [["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]]
EMPLOYMENT_PERIOD_KEYBOARD = [["üìÖ –ú–µ–Ω—å—à–µ 40 –¥–Ω–µ–π –Ω–∞–∑–∞–¥"], ["üóìÔ∏è –ë–æ–ª—å—à–µ 40 –¥–Ω–µ–π –Ω–∞–∑–∞–¥"]]
STATUS_KEYBOARD = [["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]]
TRANSPORT_KEYBOARD = [["üöó –ê–≤—Ç–æ", "üö≤ –í–µ–ª–æ", "‚ö° –≠–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ"]]
SELF_EMPLOYED_CHOICE_KEYBOARD = [["üìù –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å", "üè¢ –í –æ—Ñ–∏—Å–µ"]]
CONFIRM_KEYBOARD = [["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å"]]
EDIT_FIELD_KEYBOARD = [
    ["–§–ò–û", "–¢–µ–ª–µ—Ñ–æ–Ω"],
    ["–ì–æ—Ä–æ–¥", "–í–æ–∑—Ä–∞—Å—Ç"],
    ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ù–∞–∑–∞–¥"]
]

# ========== HANDLERS ==========
async def start(update: Update, context: CallbackContext) -> int:
    if context.user_data.get('active'):
        await update.message.reply_text("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É!")
        return ConversationHandler.END
        
    context.user_data.clear()
    context.user_data['active'] = True
    
    await update.message.reply_text(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞–≥–Ω–∏—Ç–î–æ—Å—Ç–∞–≤–∫–∞! üåü\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:",
        reply_markup=ReplyKeyboardMarkup(
            CITIZENSHIP_KEYBOARD,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return CITIZENSHIP

async def citizenship(update: Update, context: CallbackContext) -> int:
    choice = update.message.text
    if choice not in ["üá∑üá∫ –†–§", "üåç –°–ù–ì/–î—Ä—É–≥–æ–µ"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return CITIZENSHIP
    
    if choice == "üåç –°–ù–ì/–î—Ä—É–≥–æ–µ":
        await update.message.reply_text(
            "üåê –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É:",
            reply_markup=ReplyKeyboardMarkup(
                SNG_COUNTRIES,
                resize_keyboard=True
            )
        )
        return CITIZENSHIP_SNG
    
    context.user_data["citizenship"] = "üá∑üá∫ –†–æ—Å—Å–∏—è"
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
    return FULL_NAME

async def citizenship_sng(update: Update, context: CallbackContext) -> int:
    country = update.message.text
    valid_choices = [item for sublist in SNG_COUNTRIES for item in sublist]
    
    if country not in valid_choices:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return CITIZENSHIP_SNG
    
    if country == "üåç –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞":
        await update.message.reply_text(
            "üåê –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:",
            reply_markup=ReplyKeyboardMarkup(
                [["üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]],
                resize_keyboard=True
            )
        )
        return CITIZENSHIP_OTHER
    
    context.user_data["citizenship"] = country
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
    return FULL_NAME

async def citizenship_other(update: Update, context: CallbackContext) -> int:
    country = update.message.text.strip()
    if country == "üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        country = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    context.user_data["citizenship"] = f"üåç {country}"
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
    return FULL_NAME

async def full_name(update: Update, context: CallbackContext) -> int:
    full_name = update.message.text.strip()
    full_name = ' '.join(full_name.split()).replace('--', '-')
    
    pattern = r"""
        ^
        [–ê-–Ø–Å]
        [–∞-—è—ë-]+
        (?:\s[–ê-–Ø–Å][–∞-—è—ë-]+){1,2}
        $
    """
    
    if not re.fullmatch(pattern, full_name, re.VERBOSE | re.IGNORECASE):
        examples = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω\n‚Ä¢ –ü–µ—Ç—Ä–æ–≤-–í–æ–¥–∫–∏–Ω –ê–ª–µ–∫—Å–µ–π"
        await update.message.reply_text(examples)
        return FULL_NAME
    
    parts = full_name.split()
    for part in parts:
        if len(part.replace('-', '')) < 2:
            await update.message.reply_text("‚ùå –ö–∞–∂–¥–∞—è —á–∞—Å—Ç—å –§–ò–û –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –∏–∑ 2 –±—É–∫–≤")
            return FULL_NAME
    
    context.user_data["full_name"] = full_name.title()
    
    await update.message.reply_text(
        "üìã –†–∞–Ω–µ–µ —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ –ú–∞–≥–Ω–∏—Ç–î–æ—Å—Ç–∞–≤–∫–µ?",
        reply_markup=ReplyKeyboardMarkup(
            PRIOR_EMPLOYMENT_KEYBOARD,
            resize_keyboard=True
        )
    )
    return PRIOR_EMPLOYMENT

async def prior_employment(update: Update, context: CallbackContext) -> int:
    answer = update.message.text
    if answer not in ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return PRIOR_EMPLOYMENT
    
    context.user_data["prior_employment"] = answer
    
    if answer == "‚ùå –ù–µ—Ç":
        await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7, 7 –∏–ª–∏ 8):")
        return PHONE
    
    await update.message.reply_text(
        "üìÜ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–∞–±–æ—Ç—ã:",
        reply_markup=ReplyKeyboardMarkup(
            EMPLOYMENT_PERIOD_KEYBOARD,
            resize_keyboard=True
        )
    )
    return EMPLOYMENT_PERIOD

async def employment_period(update: Update, context: CallbackContext) -> int:
    period = update.message.text
    valid_choices = ["üìÖ –ú–µ–Ω—å—à–µ 40 –¥–Ω–µ–π –Ω–∞–∑–∞–¥", "üóìÔ∏è –ë–æ–ª—å—à–µ 40 –¥–Ω–µ–π –Ω–∞–∑–∞–¥"]
    
    if period not in valid_choices:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return EMPLOYMENT_PERIOD
    
    context.user_data["employment_period"] = period
    
    if period == "üìÖ –ú–µ–Ω—å—à–µ 40 –¥–Ω–µ–π –Ω–∞–∑–∞–¥":
        context.user_data["special_note"] = "üö® –í–ù–ò–ú–ê–ù–ò–ï: –ö–∞–Ω–¥–∏–¥–∞—Ç —Ä–∞–±–æ—Ç–∞–ª –º–µ–Ω–µ–µ 40 –¥–Ω–µ–π –Ω–∞–∑–∞–¥!"
    
    await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7, 7 –∏–ª–∏ 8):")
    return PHONE

async def phone(update: Update, context: CallbackContext) -> int:
    raw_phone = update.message.text
    clean_phone = ''.join(filter(str.isdigit, raw_phone))
    
    if clean_phone.startswith('8') and len(clean_phone) == 11:
        clean_phone = '7' + clean_phone[1:]
    
    if not clean_phone.startswith('7') or len(clean_phone) != 11:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä—ã: +79123456789, 79123456789, 89123456789")
        return PHONE
    
    formatted_phone = f"+7 ({clean_phone[1:4]}) {clean_phone[4:7]}-{clean_phone[7:9]}-{clean_phone[9:11]}"
    context.user_data["phone"] = formatted_phone
    await update.message.reply_text("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    return CITY

async def city(update: Update, context: CallbackContext) -> int:
    city = update.message.text.strip()
    
    if len(city) < 2:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
        return CITY
    
    if any(c.isdigit() or c in '!@#$%^&*()_+={}[]|\\:;"<>,?/~`' for c in city):
        await update.message.reply_text("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã")
        return CITY
    
    if not is_valid_russian_city(city):
        await update.message.reply_text(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏\n"
            "–ü—Ä–∏–º–µ—Ä—ã: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ö–∞–∑–∞–Ω—å\n"
            "–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥"
        )
        return CITY
    
    context.user_data["city"] = city.title()
    await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    return AGE

async def age(update: Update, context: CallbackContext) -> int:
    try:
        age = int(update.message.text)
        if age < 14 or age > 100:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 14 –¥–æ 100):")
        return AGE
    
    context.user_data["age"] = age
    
    if age < 18:
        context.user_data["age_warning"] = True
    
    await update.message.reply_text(
        "üìÑ –ï—Å—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ?",
        reply_markup=ReplyKeyboardMarkup(
            STATUS_KEYBOARD,
            resize_keyboard=True
        )
    )
    return SELF_EMPLOYED

async def self_employed(update: Update, context: CallbackContext) -> int:
    status = update.message.text
    if status not in ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return SELF_EMPLOYED
    
    context.user_data["self_employed"] = status
    
    if status == "‚ùå –ù–µ—Ç":
        await update.message.reply_text(
            "üõ†Ô∏è –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ–π—á–∞—Å?",
            reply_markup=ReplyKeyboardMarkup(
                SELF_EMPLOYED_CHOICE_KEYBOARD,
                resize_keyboard=True
            )
        )
        return SELF_EMPLOYED_CHOICE
    
    await update.message.reply_text(
        "üöó –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:",
        reply_markup=ReplyKeyboardMarkup(
            TRANSPORT_KEYBOARD,
            resize_keyboard=True
        )
    )
    return TRANSPORT

async def self_employed_choice(update: Update, context: CallbackContext) -> int:
    choice = update.message.text
    if choice not in ["üìù –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å", "üè¢ –í –æ—Ñ–∏—Å–µ"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µüëá")
        return SELF_EMPLOYED_CHOICE
    
    context.user_data["self_employed_choice"] = choice

    if choice == "üìù –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å":
        instruction = """
üìã <b>–ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>

1. <b>–°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b> üì≤
   ‚Üí <a href="https://npd.nalog.ru/">¬´–ú–æ–π –Ω–∞–ª–æ–≥¬ª –æ—Ç –§–ù–°</a>

2. <b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>
   ‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç –†–§
   ‚Ä¢ –°–ù–ò–õ–°/–ò–ù–ù
   ‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

3. <b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ:</b>
   üì∑ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞
   üì∑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–æ–ø–∏—Å–∫–æ–π

4. <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É</b> ‚úÖ

5. <b>–ü–æ–ª—É—á–∏—Ç–µ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ</b> —á–µ—Ä–µ–∑ 1-3 –¥–Ω—è üéâ
"""
        await update.message.reply_text(
            instruction,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì≤ –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url="https://npd.nalog.ru/")]
            ])
        )
    
    await update.message.reply_text(
        "üöó –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:",
        reply_markup=ReplyKeyboardMarkup(
            TRANSPORT_KEYBOARD,
            resize_keyboard=True
        )
    )
    return TRANSPORT

async def transport(update: Update, context: CallbackContext) -> int:
    transport = update.message.text
    if transport not in ["üöó –ê–≤—Ç–æ", "üö≤ –í–µ–ª–æ", "‚ö° –≠–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Öüëá")
        return TRANSPORT
    
    context.user_data["transport"] = transport

    summary = [
        "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n",
        f"‚ñ´Ô∏è –§–ò–û: {context.user_data.get('full_name')}",
        f"‚ñ´Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone')}",
        f"‚ñ´Ô∏è –ì–æ—Ä–æ–¥: {context.user_data.get('city')}",
        f"‚ñ´Ô∏è –í–æ–∑—Ä–∞—Å—Ç: {context.user_data.get('age')}",
        f"‚ñ´Ô∏è –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport}\n",
        "<b>–í—Å—ë –≤–µ—Ä–Ω–æ?</b>"
    ]
    
    await update.message.reply_text(
        "\n".join(summary),
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            CONFIRM_KEYBOARD,
            resize_keyboard=True
        )
    )
    return CONFIRMATION

async def confirmation(update: Update, context: CallbackContext) -> int:
    choice = update.message.text
    
    if choice == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        required_fields = [
            'citizenship', 'full_name', 'phone',
            'city', 'age', 'self_employed', 'transport'
        ]
        
        missing = [field for field in required_fields if field not in context.user_data]
        if missing:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ ({', '.join(missing)})"
            )
            context.user_data.clear()
            return ConversationHandler.END

        try:
            user = update.message.from_user
            app_id = save_application(
                user_data=context.user_data,
                user_id=user.id,
                username=user.username
            )
            
            if not app_id:
                raise ValueError("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")

            message = [
                f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id}</b>\n\n",
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'} (ID: {user.id})\n",
                f"‚ñ´Ô∏è –§–ò–û: {context.user_data['full_name']}\n",
                f"‚ñ´Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n",
                f"‚ñ´Ô∏è –ì–æ—Ä–æ–¥: {context.user_data['city']}\n",
                f"‚ñ´Ô∏è –í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n",
                f"‚ñ´Ô∏è –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {context.user_data['transport']}\n"
            ]

            if context.user_data.get('age', 0) < 18:
                message.append("\nüö® <b>–í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç!</b>")

            if 'special_note' in context.user_data:
                message.append(f"\n{context.user_data['special_note']}")

            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text="".join(message),
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{app_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")
                ]])
            )

            await update.message.reply_text(
                "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.",
                reply_markup=ReplyKeyboardRemove()
            )

        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
        finally:
            context.user_data.clear()
        
        return ConversationHandler.END
        
    elif choice == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(
                EDIT_FIELD_KEYBOARD,
                resize_keyboard=True
            )
        )
        return EDIT_FIELD
        
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µüëá")
        return CONFIRMATION

async def edit_field_handler(update: Update, context: CallbackContext) -> int:
    field = update.message.text
    valid_fields = ["–§–ò–û", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ì–æ—Ä–æ–¥", "–í–æ–∑—Ä–∞—Å—Ç", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"]
    
    if field == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üöó –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:",
            reply_markup=ReplyKeyboardMarkup(
                TRANSPORT_KEYBOARD,
                resize_keyboard=True
            )
        )
        return TRANSPORT
    
    if field not in valid_fields:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞")
        return EDIT_FIELD
    
    context.user_data["editing_field"] = field
    
    if field == "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        await update.message.reply_text(
            "üöó –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:",
            reply_markup=ReplyKeyboardMarkup(
                TRANSPORT_KEYBOARD,
                resize_keyboard=True
            )
        )
        return TRANSPORT
    else:
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field}':")
        return {
            "–§–ò–û": FULL_NAME,
            "–¢–µ–ª–µ—Ñ–æ–Ω": PHONE,
            "–ì–æ—Ä–æ–¥": CITY,
            "–í–æ–∑—Ä–∞—Å—Ç": AGE
        }[field]

async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "‚ùå –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω.",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

async def error_handler(update: Update, context: CallbackContext):
    logger.error(msg="–û—à–∏–±–∫–∞:", exc_info=context.error)
    if update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# ========== ADMIN COMMANDS ==========
async def admin_stats(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    
    conn = sqlite3.connect(DB_NAME)
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT status, COUNT(*) FROM applications GROUP BY status")
        stats = dict(cursor.fetchall())
        
        cursor.execute("SELECT id, created_at, city FROM applications WHERE status = 'new' ORDER BY created_at DESC LIMIT 5")
        last_apps = cursor.fetchall()
        
        message = [
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫</b>\n",
            f"‚Ä¢ –ù–æ–≤—ã–µ: {stats.get('new', 0)}",
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ: {stats.get('processed', 0)}\n",
            "‚è≥ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:</b>\n"
        ]
        
        for app in last_apps:
            message.append(f"#{app[0]} - {app[2]} ({app[1][:16]})\n")
            
        await update.message.reply_text("\n".join(message), parse_mode="HTML")
        
    except sqlite3.Error as e:
        logger.error(f"DB Error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        conn.close()

async def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_CHAT_ID:
        await query.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        action, app_id = query.data.split('_')
        app_id = int(app_id)
    except:
        logger.error("Invalid callback data")
        return

    conn = sqlite3.connect(DB_NAME)
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT status, user_id, full_name FROM applications WHERE id = ?", (app_id,))
        result = cursor.fetchone()
        
        if not result:
            await query.edit_message_text(text=f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        status, user_id, full_name = result
        
        if status != 'new':
            await query.edit_message_text(text=f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ #{app_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return

        new_status = 'approved' if action == 'approve' else 'rejected'
        cursor.execute("UPDATE applications SET status = ? WHERE id = ?", (new_status, app_id))
        conn.commit()

        try:
            message_text = "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!" if action == 'approve' else "üòû –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            await context.bot.send_message(user_id, f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {full_name}:\n{message_text}")
        except telegram_error.BadRequest:
            logger.warning(f"User {user_id} blocked the bot")

        await query.edit_message_text(
            text=query.message.text.replace("–°—Ç–∞—Ç—É—Å: new", f"–°—Ç–∞—Ç—É—Å: {new_status}"),
            parse_mode="HTML",
            reply_markup=None
        )

    except Exception as e:
        logger.error(f"Callback error: {e}")
        await query.edit_message_text(text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        conn.close()

# ========== MAIN ==========
def main():
    init_db()
    
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()

    application = ApplicationBuilder() \
        .token(BOT_TOKEN) \
        .concurrent_updates(True) \
        .build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CITIZENSHIP: [MessageHandler(filters.TEXT & ~filters.COMMAND, citizenship)],
            CITIZENSHIP_SNG: [MessageHandler(filters.TEXT & ~filters.COMMAND, citizenship_sng)],
            CITIZENSHIP_OTHER: [MessageHandler(filters.TEXT & ~filters.COMMAND, citizenship_other)],
            FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, full_name)],
            PRIOR_EMPLOYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, prior_employment)],
            EMPLOYMENT_PERIOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, employment_period)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            SELF_EMPLOYED: [MessageHandler(filters.TEXT & ~filters.COMMAND, self_employed)],
            SELF_EMPLOYED_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self_employed_choice)],
            TRANSPORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, transport)],
            CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirmation)],
            EDIT_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_field_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_error_handler(error_handler)

    def shutdown(signum, frame):
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        application.stop()
        exit(0)

    signal.signal(signal.SIGINT, shutdown)
    signal.signal(signal.SIGTERM, shutdown)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()