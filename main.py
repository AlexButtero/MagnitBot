import os
import sqlite3
import logging
import asyncio
import signal
import re
from datetime import datetime
from threading import Thread
from flask import Flask, request
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    ReplyKeyboardMarkup,
    error as telegram_error
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler
)

# ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FLASK ==========
app = Flask(__name__)

@app.route('/')
def home():
    return "üöÄ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –ü–æ—Ä—Ç: " + os.environ.get('PORT', '10000'), 200

def run_flask():
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 10000)))

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
BOT_TOKEN = os.environ.get('7833583184:AAGRYKayEY1wjP8TZs9rVrNgbSLAAQwHFGY')
ADMIN_CHAT_ID = os.environ.get(' 694873692')
DB_NAME = "applications.db"

# ========== –≠–¢–ê–ü–´ –î–ò–ê–õ–û–ì–ê ==========
(
    CITIZENSHIP,
    CITIZENSHIP_SNG,
    CITIZENSHIP_OTHER,
    FULL_NAME,
    PRIOR_EMPLOYMENT,
    EMPLOYMENT_PERIOD,
    PHONE,
    CITY,
    AGE,
    SELF_EMPLOYED,
    SELF_EMPLOYED_CHOICE,
    TRANSPORT,
    CONFIRMATION,
    EDIT_FIELD,
) = range(14)

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS applications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            full_name TEXT NOT NULL,
            citizenship TEXT NOT NULL,
            prior_employment TEXT,
            employment_period TEXT,
            phone TEXT NOT NULL,
            city TEXT NOT NULL,
            age INTEGER NOT NULL,
            self_employed TEXT NOT NULL,
            self_employed_choice TEXT,
            transport TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT 'new'
        )
    """)
    conn.commit()
    conn.close()

def save_application(user_data, user_id, username):
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT INTO applications (
                user_id,
                username,
                full_name,
                citizenship,
                prior_employment,
                employment_period,
                phone,
                city,
                age,
                self_employed,
                self_employed_choice,
                transport
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            user_id,
            username,
            user_data.get('full_name'),
            user_data.get('citizenship'),
            user_data.get('prior_employment'),
            user_data.get('employment_period'),
            user_data.get('phone'),
            user_data.get('city'),
            user_data.get('age'),
            user_data.get('self_employed'),
            user_data.get('self_employed_choice'),
            user_data.get('transport')
        ))
        
        conn.commit()
        return cursor.lastrowid
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        return None
    finally:
        conn.close()

# ========== –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• ==========
def validate_application(data: dict) -> bool:
    required_fields = [
        'citizenship', 
        'full_name',
        'phone',
        'city',
        'age',
        'self_employed',
        'transport'
    ]
    return all(data.get(field) for field in required_fields)

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def add_restart_button(keyboard):
    return keyboard + [[InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data='/start')]]

SNG_COUNTRIES = [
    ["üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å", "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"],
    ["üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", "üá¶üá≤ –ê—Ä–º–µ–Ω–∏—è"],
    ["üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω", "üá≤üá© –ú–æ–ª–¥–æ–≤–∞"],
    ["üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω", "üáπüáØ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω"],
    ["üåç –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞", "üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]
]

CITIZENSHIP_KEYBOARD = add_restart_button([["üá∑üá∫ –†–§", "üåç –°–ù–ì/–î—Ä—É–≥–æ–µ"]])
PRIOR_EMPLOYMENT_KEYBOARD = add_restart_button([["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]])
EMPLOYMENT_PERIOD_KEYBOARD = add_restart_button([
    ["üìÖ –ú–µ–Ω—å—à–µ 40 –¥–Ω–µ–π –Ω–∞–∑–∞–¥"], 
    ["üóìÔ∏è –ë–æ–ª—å—à–µ 40 –¥–Ω–µ–π –Ω–∞–∑–∞–¥"]
])
STATUS_KEYBOARD = add_restart_button([["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]])
TRANSPORT_KEYBOARD = add_restart_button([["üöó –ê–≤—Ç–æ", "üö≤ –í–µ–ª–æ", "‚ö° –≠–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ"]])
SELF_EMPLOYED_CHOICE_KEYBOARD = add_restart_button([["üìù –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å", "üè¢ –í –æ—Ñ–∏—Å–µ"]])
CONFIRM_KEYBOARD = add_restart_button([["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å"]])
EDIT_FIELD_KEYBOARD = add_restart_button([
    ["–§–ò–û", "–¢–µ–ª–µ—Ñ–æ–Ω"],
    ["–ì–æ—Ä–æ–¥", "–í–æ–∑—Ä–∞—Å—Ç"],
    ["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ù–∞–∑–∞–¥"]
])

# ========== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
async def start(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞–≥–Ω–∏—Ç–î–æ—Å—Ç–∞–≤–∫–∞! üåü\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:",
        reply_markup=ReplyKeyboardMarkup(
            CITIZENSHIP_KEYBOARD,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return CITIZENSHIP

async def citizenship(update: Update, context: CallbackContext) -> int:
    choice = update.message.text
    if choice not in ["üá∑üá∫ –†–§", "üåç –°–ù–ì/–î—Ä—É–≥–æ–µ"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return CITIZENSHIP
    
    if choice == "üåç –°–ù–ì/–î—Ä—É–≥–æ–µ":
        await update.message.reply_text(
            "üåê –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É:",
            reply_markup=ReplyKeyboardMarkup(
                add_restart_button(SNG_COUNTRIES),
                resize_keyboard=True
            )
        )
        return CITIZENSHIP_SNG
    
    context.user_data["citizenship"] = "üá∑üá∫ –†–æ—Å—Å–∏—è"
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
    return FULL_NAME

async def citizenship_sng(update: Update, context: CallbackContext) -> int:
    country = update.message.text
    valid_choices = [item for sublist in SNG_COUNTRIES for item in sublist]
    
    if country not in valid_choices:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return CITIZENSHIP_SNG
    
    if country == "üåç –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞":
        await update.message.reply_text(
            "üåê –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:",
            reply_markup=ReplyKeyboardMarkup(
                add_restart_button([["üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]]),
                resize_keyboard=True
            )
        )
        return CITIZENSHIP_OTHER
    
    context.user_data["citizenship"] = country
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
    return FULL_NAME

async def citizenship_other(update: Update, context: CallbackContext) -> int:
    country = update.message.text.strip()
    if country == "üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        country = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    context.user_data["citizenship"] = f"üåç {country}"
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
    return FULL_NAME

async def full_name(update: Update, context: CallbackContext) -> int:
    full_name = update.message.text.strip()
    if not re.match(r"^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$", full_name):
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ")
        return FULL_NAME
    
    context.user_data["full_name"] = full_name
    await update.message.reply_text(
        "üìã –†–∞–Ω–µ–µ —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ –ú–∞–≥–Ω–∏—Ç–î–æ—Å—Ç–∞–≤–∫–µ?",
        reply_markup=ReplyKeyboardMarkup(
            PRIOR_EMPLOYMENT_KEYBOARD,
            resize_keyboard=True
        )
    )
    return PRIOR_EMPLOYMENT

async def prior_employment(update: Update, context: CallbackContext) -> int:
    answer = update.message.text
    if answer not in ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return PRIOR_EMPLOYMENT
    context.user_data["prior_employment"] = answer
    
    if answer == "‚ùå –ù–µ—Ç":
        await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7, 7 –∏–ª–∏ 8):")
        return PHONE
    
    await update.message.reply_text(
        "üìÜ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–∞–±–æ—Ç—ã:",
        reply_markup=ReplyKeyboardMarkup(
            EMPLOYMENT_PERIOD_KEYBOARD,
            resize_keyboard=True
        )
    )
    return EMPLOYMENT_PERIOD

async def employment_period(update: Update, context: CallbackContext) -> int:
    period = update.message.text
    valid_choices = ["üìÖ –ú–µ–Ω—å—à–µ 40 –¥–Ω–µ–π –Ω–∞–∑–∞–¥", "üóìÔ∏è –ë–æ–ª—å—à–µ 40 –¥–Ω–µ–π –Ω–∞–∑–∞–¥"]
    
    if period not in valid_choices:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
            reply_markup=ReplyKeyboardMarkup(
                EMPLOYMENT_PERIOD_KEYBOARD,
                resize_keyboard=True
            )
        )
        return EMPLOYMENT_PERIOD
    
    context.user_data["employment_period"] = period
    
    if period == "üìÖ –ú–µ–Ω—å—à–µ 40 –¥–Ω–µ–π –Ω–∞–∑–∞–¥":
        context.user_data["special_note"] = "üö® <b>–í–ù–ò–ú–ê–ù–ò–ï: –ö–∞–Ω–¥–∏–¥–∞—Ç —Ä–∞–±–æ—Ç–∞–ª –º–µ–Ω–µ–µ 40 –¥–Ω–µ–π –Ω–∞–∑–∞–¥!</b>"
    
    await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7, 7 –∏–ª–∏ 8):")
    return PHONE

async def phone(update: Update, context: CallbackContext) -> int:
    raw_phone = update.message.text
    clean_phone = ''.join(filter(str.isdigit, raw_phone))
    
    if clean_phone.startswith('8') and len(clean_phone) == 11:
        clean_phone = '7' + clean_phone[1:]
    
    if not clean_phone.startswith('7') or len(clean_phone) != 11:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "+79123456789\n79123456789\n89123456789",
            reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
        )
        return PHONE
    
    formatted_phone = f"+7 ({clean_phone[1:4]}) {clean_phone[4:7]}-{clean_phone[7:9]}-{clean_phone[9:11]}"
    context.user_data["phone"] = formatted_phone
    await update.message.reply_text("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    return CITY

async def city(update: Update, context: CallbackContext) -> int:
    city = update.message.text.strip()
    if len(city) < 2 or any(c.isdigit() or c in '!@#$%^&*()_+={}[]|\\:;"<>,?/~`' for c in city):
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –±–µ–∑ —Ü–∏—Ñ—Ä –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤.")
        return CITY
    
    context.user_data["city"] = city
    await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    return AGE

async def age(update: Update, context: CallbackContext) -> int:
    try:
        age = int(update.message.text)
        if age < 14 or age > 100:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 14 –¥–æ 100):")
        return AGE
    
    context.user_data["age"] = age
    
    if age < 18:
        context.user_data["age_warning"] = True
    
    await update.message.reply_text(
        "üìÑ –ï—Å—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ?",
        reply_markup=ReplyKeyboardMarkup(
            STATUS_KEYBOARD,
            resize_keyboard=True
        )
    )
    return SELF_EMPLOYED

async def self_employed(update: Update, context: CallbackContext) -> int:
    status = update.message.text
    if status not in ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return SELF_EMPLOYED
    
    context.user_data["self_employed"] = status
    context.user_data.pop("self_employed_choice", None)
    
    if status == "‚ùå –ù–µ—Ç":
        await update.message.reply_text(
            "üõ†Ô∏è –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ–π—á–∞—Å?",
            reply_markup=ReplyKeyboardMarkup(
                SELF_EMPLOYED_CHOICE_KEYBOARD,
                resize_keyboard=True
            )
        )
        return SELF_EMPLOYED_CHOICE
    
    await update.message.reply_text(
        "üöó –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:",
        reply_markup=ReplyKeyboardMarkup(
            TRANSPORT_KEYBOARD,
            resize_keyboard=True
        )
    )
    return TRANSPORT

async def self_employed_choice(update: Update, context: CallbackContext) -> int:
    choice = update.message.text
    if choice not in ["üìù –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å", "üè¢ –í –æ—Ñ–∏—Å–µ"]:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µüëá",
            reply_markup=ReplyKeyboardMarkup(
                SELF_EMPLOYED_CHOICE_KEYBOARD,
                resize_keyboard=True
            )
        )
        return SELF_EMPLOYED_CHOICE
    
    context.user_data["self_employed_choice"] = choice

    if choice == "üìù –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å":
        instruction = """
üìã <b>–ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>

1. <b>–°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b> üì≤
   ‚Üí <a href="https://npd.nalog.ru/">¬´–ú–æ–π –Ω–∞–ª–æ–≥¬ª –æ—Ç –§–ù–°</a>

2. <b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>
   ‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç –†–§
   ‚Ä¢ –°–ù–ò–õ–°/–ò–ù–ù
   ‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

3. <b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ:</b>
   üì∑ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞
   üì∑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–æ–ø–∏—Å–∫–æ–π

4. <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É</b> ‚úÖ

5. <b>–ü–æ–ª—É—á–∏—Ç–µ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ</b> —á–µ—Ä–µ–∑ 1-3 –¥–Ω—è üéâ

–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π!
"""
        await update.message.reply_text(
            instruction,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì≤ –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url="https://npd.nalog.ru/")]
            ])
        )
    
    await update.message.reply_text(
        "üöó –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:",
        reply_markup=ReplyKeyboardMarkup(
            TRANSPORT_KEYBOARD,
            resize_keyboard=True
        )
    )
    return TRANSPORT

async def transport(update: Update, context: CallbackContext) -> int:
    transport = update.message.text
    if transport not in ["üöó –ê–≤—Ç–æ", "üö≤ –í–µ–ª–æ", "‚ö° –≠–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ"]:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Öüëá",
            reply_markup=ReplyKeyboardMarkup(
                TRANSPORT_KEYBOARD,
                resize_keyboard=True
            )
        )
        return TRANSPORT
    
    context.user_data["transport"] = transport

    summary = [
        "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n",
        f"‚ñ´Ô∏è –§–ò–û: {context.user_data.get('full_name')}",
        f"‚ñ´Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone')}",
        f"‚ñ´Ô∏è –ì–æ—Ä–æ–¥: {context.user_data.get('city')}",
        f"‚ñ´Ô∏è –í–æ–∑—Ä–∞—Å—Ç: {context.user_data.get('age')}",
        f"‚ñ´Ô∏è –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport}\n",
        "<b>–í—Å—ë –≤–µ—Ä–Ω–æ?</b>"
    ]
    
    await update.message.reply_text(
        "\n".join(summary),
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            CONFIRM_KEYBOARD,
            resize_keyboard=True
        )
    )
    return CONFIRMATION

async def confirmation(update: Update, context: CallbackContext) -> int:
    choice = update.message.text
    
    if choice == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        if not validate_application(context.user_data):
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
            )
            return ConversationHandler.END

        user = update.message.from_user
        app_id = save_application(
            user_data=context.user_data,
            user_id=user.id,
            username=user.username
        )
        
        if not app_id:
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
            )
            return ConversationHandler.END

        message = [
            f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id}</b>\n\n",
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'} (ID: {user.id})\n",
            f"‚ñ´Ô∏è –í–æ–∑—Ä–∞—Å—Ç: {context.user_data.get('age', '‚Äî')}\n",
            f"‚ñ´Ô∏è –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {context.user_data.get('citizenship', '‚Äî')}\n",
            f"‚ñ´Ô∏è –§–ò–û: {context.user_data.get('full_name', '‚Äî')}\n",
            f"‚ñ´Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone', '‚Äî')}\n",
            f"‚ñ´Ô∏è –ì–æ—Ä–æ–¥: {context.user_data.get('city', '‚Äî')}\n",
            f"‚ñ´Ô∏è –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: {context.user_data.get('self_employed', '‚Äî')}\n"
        ]
        
        if choice := context.user_data.get('self_employed_choice'):
            message.append(f"‚ñ´Ô∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {choice}\n")
        
        message.append(f"‚ñ´Ô∏è –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {context.user_data.get('transport', '‚Äî')}\n")
        
        if context.user_data.get('special_note'):
            message.append(f"\n{context.user_data['special_note']}")
        
        if context.user_data.get('age_warning'):
            message.append("\nüö® <b>–í–ù–ò–ú–ê–ù–ò–ï: –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π!</b>")

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{app_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")
            ]
        ]

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text="".join(message),
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        await update.message.reply_text(
            "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.",
            reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
        )
        return ConversationHandler.END
        
    elif choice == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(
                EDIT_FIELD_KEYBOARD,
                resize_keyboard=True
            )
        )
        return EDIT_FIELD
        
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µüëá")
        return CONFIRMATION

async def edit_field_handler(update: Update, context: CallbackContext) -> int:
    field = update.message.text
    valid_fields = ["–§–ò–û", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ì–æ—Ä–æ–¥", "–í–æ–∑—Ä–∞—Å—Ç", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"]
    
    if field == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üöó –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:",
            reply_markup=ReplyKeyboardMarkup(
                TRANSPORT_KEYBOARD,
                resize_keyboard=True
            )
        )
        return TRANSPORT
    
    if field not in valid_fields:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞",
            reply_markup=ReplyKeyboardMarkup(
                EDIT_FIELD_KEYBOARD,
                resize_keyboard=True
            )
        )
        return EDIT_FIELD
    
    context.user_data["editing_field"] = field
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field}':")
    
    return {
        "–§–ò–û": FULL_NAME,
        "–¢–µ–ª–µ—Ñ–æ–Ω": PHONE,
        "–ì–æ—Ä–æ–¥": CITY,
        "–í–æ–∑—Ä–∞—Å—Ç": AGE,
        "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": TRANSPORT
    }[field]

async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "‚ùå –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω.",
        reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
    )
    return ConversationHandler.END

async def error_handler(update: Update, context: CallbackContext):
    logger.error(msg="–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:", exc_info=context.error)
    
    if update and update.message:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
        )

# ========== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ==========
async def admin_stats(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_CHAT_ID:
        return
    
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    try:
        cursor.execute("SELECT status, COUNT(*) FROM applications GROUP BY status")
        stats = dict(cursor.fetchall())
        
        cursor.execute("""
            SELECT id, created_at, city 
            FROM applications 
            WHERE status = 'new'
            ORDER BY created_at DESC 
            LIMIT 5
        """)
        last_apps = cursor.fetchall()
        
        message = [
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫</b>\n",
            f"‚Ä¢ –ù–æ–≤—ã–µ: {stats.get('new', 0)}",
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ: {stats.get('processed', 0)}\n",
            "‚è≥ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:</b>\n"
        ]
        
        for app in last_apps:
            message.append(f"#{app[0]} - {app[2]} ({app[1][:16]})\n")
            
        await update.message.reply_text(
            "\n".join(message),
            parse_mode="HTML"
        )
        
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        conn.close()

async def approve_application(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    
    try:
        app_id = int(context.args[0])
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        cursor.execute("""
            UPDATE applications 
            SET status = 'approved' 
            WHERE id = ? AND status = 'new'
        """, (app_id,))
        
        if cursor.rowcount == 0:
            await update.message.reply_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return
        
        cursor.execute("SELECT user_id, full_name FROM applications WHERE id = ?", (app_id,))
        user_id, full_name = cursor.fetchone()
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üéâ {full_name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
        except telegram_error.TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞")
        conn.commit()
        
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /approve <ID_–∑–∞—è–≤–∫–∏>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ approve: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    finally:
        conn.close()

async def reject_application(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    
    try:
        app_id = int(context.args[0])
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        cursor.execute("""
            UPDATE applications 
            SET status = 'rejected' 
            WHERE id = ? AND status = 'new'
        """, (app_id,))
        
        if cursor.rowcount == 0:
            await update.message.reply_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return
        
        cursor.execute("SELECT user_id, full_name FROM applications WHERE id = ?", (app_id,))
        user_id, full_name = cursor.fetchone()
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üòû {full_name}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            )
        except telegram_error.TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        conn.commit()
        
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reject <ID_–∑–∞—è–≤–∫–∏>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ reject: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    finally:
        conn.close()

async def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if not query.data or not query.from_user.id == ADMIN_CHAT_ID:
        return

    action, app_id = query.data.split('_')
    app_id = int(app_id)

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT status, user_id, full_name 
            FROM applications 
            WHERE id = ?
        """, (app_id,))
        result = cursor.fetchone()
        
        if not result:
            await query.edit_message_text(text=f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ #{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        status, user_id, full_name = result
        
        if status != 'new':
            await query.edit_message_text(text=f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ #{app_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return

        new_status = 'approved' if action == 'approve' else 'rejected'
        cursor.execute("""
            UPDATE applications 
            SET status = ? 
            WHERE id = ?
        """, (new_status, app_id))

        try:
            text = (
                f"üéâ {full_name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!" 
                if action == 'approve' 
                else f"üòû {full_name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            )
            await context.bot.send_message(
                chat_id=user_id,
                text=text
            )
        except telegram_error.TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        new_text = query.message.text + f"\n\nüü¢ –°—Ç–∞—Ç—É—Å: {new_status.upper()}"
        await query.edit_message_text(
            text=new_text,
            parse_mode="HTML",
            reply_markup=None
        )

        conn.commit()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await query.edit_message_text(text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ #{app_id}")
    finally:
        conn.close()

# ========== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========
def main():
    init_db()
    
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()

    application = ApplicationBuilder() \
        .token(BOT_TOKEN) \
        .concurrent_updates(True) \
        .build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CITIZENSHIP: [MessageHandler(filters.TEXT & ~filters.COMMAND, citizenship)],
            CITIZENSHIP_SNG: [MessageHandler(filters.TEXT & ~filters.COMMAND, citizenship_sng)],
            CITIZENSHIP_OTHER: [MessageHandler(filters.TEXT & ~filters.COMMAND, citizenship_other)],
            FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, full_name)],
            PRIOR_EMPLOYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, prior_employment)],
            EMPLOYMENT_PERIOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, employment_period)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            SELF_EMPLOYED: [MessageHandler(filters.TEXT & ~filters.COMMAND, self_employed)],
            SELF_EMPLOYED_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self_employed_choice)],
            TRANSPORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, transport)],
            CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirmation)],
            EDIT_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_field_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CommandHandler("approve", approve_application))
    application.add_handler(CommandHandler("reject", reject_application))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_error_handler(error_handler)

    def shutdown(signum, frame):
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        application.stop()
        exit(0)

    signal.signal(signal.SIGINT, shutdown)
    signal.signal(signal.SIGTERM, shutdown)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()